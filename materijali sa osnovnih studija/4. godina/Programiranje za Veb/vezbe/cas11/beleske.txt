danas opet dopunjujemo aplikaciju od pre, radimo obradu formulara

Kada je potrebno da imamo neku funkcionalnost koja nije konkretno vezana za neku komponentu,
tj prozima se kroz vise komponenti, ta funkcionalnost se zove servis
Npr hocemo da imamo neki 'dnevnik/log' u kioji se upisuje nesto svaki put kada se desi neki relevantan dogadjaj bilo
gde u aplikaciji. To bismo npr postigli takos to imamo jedan objekat neke nase klase Log koji se onda prosledi svim
komponentama koje treba nesto da loguju. Dakle ta klasa Log je servis
(za nase potrrebe okej je da gledamo servise kao neke singletone, ali to ne mora uvek da bude slucaj)

Postoje 2 vrste servisa:
    - servisi podataka (nesto sto barata nekim podacima, to su npr obrada zahteva servera (?), autentifikacija itd)
    - servisi usluga (implementiraju neke funkcionalnosti, npr servis za kreiranje formulara (?))

Za koriscenje servisa potreban nam je mehanizam ugnjezdavanja zavisnosti
Imacemo komponentu koja zeli da pristupi nekom servisu (tj da ga korsiti), a u kodu ce se to manifestovati
sa dekoratorom Injectable  (?)

-- 
skini sa zvanicnih materijala slike kako aplikacija treba da izgleda kada budu dostupni

prvo smo napravili ono dugme za uploadovanje slike

posle toga smo radili  obradu formulara za user-profile
Dodali smo u app.module.ts   ReactiveFormsModule koji cemo koristiti za pravljenje reaktivnih formulara
Da bi ovi formualri funkcionisali moraju da se ispune 2 stvari:
    - da imaju svoju html reprezentaciju (to je ono sto smo dodali u user-profile.component.html)
    - da u TS kodu kompoennte takodje imaju reprezentaciju, tj da u kodu ima objekat klase FormGroup

posle toga smo radili formular za products u create-products komponenti
Napravili smo i product-state model koji ima enum za radio buttone (da nebi korsitili onaj isti za popularity)
Ovde smo hteli da napravimo custom validator koji proverava da li se ime sastoji samo od brojeva i belina
Pravimo nov folder gde ce nam biti sve validatorske funkcije (iako nije moralo)

Poslednej sto smo radili je da smo zapoceli komunikaciju sa serverom
Imala je neki app od proslog casa koji samo implementira get zahtev koji vraca neke proizvode
Za ovu komunikaciju koristimo servis (Smestamo ih u services folder), u terminalu radimo:
    ng generate service services/product
Kada kreiramos servis preko ove komande, imace dekorator @Injectable
To znaci da ce instanca servisa biti napravljena u okviru korene komponente i onda prosledjena svim ostalima
Servise mozmeo da ubrizgavamo i jedne u druge
Za komunikaciju sa serverom potreban nam je i HttpClientModule
--