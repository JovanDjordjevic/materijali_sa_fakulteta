#include <numeric>#include <iostream>#include <vector>#include <future>using namespace std;template <typename Iterator>int sumaNiza(std::launch rezim, Iterator beg, Iterator end){    auto len = end - beg;	// ako je niz kratak, racunamo odjednom    if(len < 1000000)        return std::accumulate(beg, end, 0); 		// inace delimo racunanje na dva jednaka dela    Iterator mid = beg + len/2;    future<int> medjuzbir = std::async( rezim, sumaNiza<Iterator>, rezim, mid, end );    int sum = sumaNiza( rezim, beg, mid );	// spojimo delove i vratimo rezultat    return sum + medjuzbir.get();} void test( std::launch rezim ){	// niz od n elemenata, svi imaju vrednost 1    std::vector<int> v(50000000, 1);    auto t0 = chrono::system_clock::now();	int suma = sumaNiza( 					rezim,					v.begin(), v.end() 				);    auto t1 = chrono::system_clock::now();    auto d = chrono::duration_cast<chrono::milliseconds>( t1 - t0 );	    std::cout << "Suma niza je " << suma << endl;    cout << "Trajanje: " << d.count()/1000.0 << "s" << endl;}int main(){	cout << "ASYNC:" << endl;	test( std::launch::async );	cout << "DEFERRED:" << endl;	test( std::launch::deferred );	return 0;	}