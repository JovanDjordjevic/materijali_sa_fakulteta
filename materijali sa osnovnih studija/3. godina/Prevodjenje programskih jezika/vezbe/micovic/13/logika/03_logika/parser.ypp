%{
#include <map>
#include <cstdlib>
#include <iostream>

#include "formula.hpp"

extern int yylex();

void yyerror(std::string msg)
{
    std::cerr << "Syntax error: " << msg << std::endl;
    exit(EXIT_FAILURE);
}

std::map<std::string, LOGIC_VAL> tablica;
%}

%union {
    formula* formula_type;
    std::string* str_type;
}

%token and_tok or_tok imp_tok eq_tok true_tok false_tok assign_tok
%token<str_type> id_tok
%type<formula_type> E

%left '!'
%left and_tok
%left or_tok
%left imp_tok
%left eq_tok

%%
Program
    : Program Naredba
    | Naredba
    ;

Naredba
    : E '\n' {
        std::cout << $1->str() << std::endl;
        delete $1;
    }
    | id_tok assign_tok E '\n' {
        tablica[*$1] = $3->val();
        delete $1;
        delete $3;
    }
    ;

E
    : id_tok {
        // Bice dodato u sledecem delu zadatka
        auto finder = tablica.find(*$1);
        if (finder == tablica.end()) {
            $$ = new formula(UNDEF_VAL);
        } else {
            $$ = new formula(finder->second);
        }
        delete $1;
    }
    | E and_tok E {
       $$ = new formula($1->and_op(*$3));
       delete $1;
       delete $3;
    }
    | E or_tok E {
       $$ = new formula($1->or_op(*$3));
       delete $1;
       delete $3;
    }
    | E imp_tok E {
       $$ = new formula($1->imp_op(*$3));
       delete $1;
       delete $3;
    }
    | E eq_tok E {
       $$ = new formula($1->eq_op(*$3));
       delete $1;
       delete $3;
    }
    | '!' E {
        $$ = new formula($2->not_op());
        delete $2;
    }
    | true_tok {
        $$ = new formula(TRUE_VAL);
    }
    | false_tok {
        $$ = new formula(FALSE_VAL);
    }
    ;
%%
int main()
{
    yyparse();
    return 0;
}
