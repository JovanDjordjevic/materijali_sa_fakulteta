glavna razlika predikatske logike u odnosu na iskaznu je sto u rpedikatskoj imamo kvantifikatore "za sve" i "postoji"
∀ ∃


1a. Zapisati u predikatskoj logici recenicu "Svako zadovoljstvo se placa"
    Pro tip je da ne krenemo od kvantifikatora, vec da ih izbrisemo iz recenice da bi videli sta su nam predikatski
    -> "Zadovoljstvo se placa" i vidimo da supredikati zadovoljstvo i placa

    predikati:
    z(x) - x je zadovoljstvo
    p(x) - x se placa

    (∀x) (z(x) & p(x))  - ovo je NETACNO zato sto bi ovo znacilo da je svako x (sta god ono bilo) i zadovoljstvo i da se placa, sto nije tacno
                          (tj citalo bi se "sve je zadovoljstvo i sve se placa")
    (∀x) (z(x) => p(x)) - TACNO


1b. "Postoji zadovoljstvo koje se placa"
    z(x) - x je zadovoljstvo
    p(x) - x se placa

    (∃x) (z(x) => p(x)) - ovo je NETACNO zato sto se kod ∃ misli na neku konkretnu jedinku za koju znamo da su neke osobine tacne. Ovo sto
                          pise ovde bi se citalo "postoji x takvo da ako je ono zadovoljstvo onda se placa" (ovo bi znacilo da se sve sto je zadovoljstvo placa)
    (∃x) (z(x) & p(x))  - TACNO  "postoji x takvo da je zadovoljstvo i placa se"


1c. "Nijedno zadovoljstvo nije posao"
    z(x) - x je zadovoljstvo
    p(x) - x je posao

    (∀x) (z(x) & ~p(x))  - NETACNO, ovo bi znacilo "sve je zadovoljstvo i nista nije posao"
    (∀x) (z(x) => ~p(x)) - TACNO


2. Zapisati sve ove recenice:
    "Sve sto leti to ima krila i lagano je"
    "Sve sto pliva to nema krila"
    "Sve sto pliva to ne leti"

    predikati:
    l(x) - x leti
    k(x) - x ima krila
    p(x) - x pliva
    lag(x) - x je lagano

    (∀x) ( l(x) => (k(x) & lag(x)) )
    (∀x) ( p(x) => ~k(x) )
    (∀x) ( p(x) => ~l(x) )


3.Zapisati recenice:   (ovde imamo predikate arnosti vece od 1)  
    Dve nemimoilazne prave se seku ili su paralelene.
    Prave koje se seku leže u istoj ravni.
    Prave koje su paralelene leže u istoj ravni.
    Dve nemimoilazne prave leže u istoj ravni.

    predikati:
    m(x, y) - prave x i y su nemimoilazne
    s(x, y) - prave x i y se seku
    p(x, y) - prave x i y su paralelne
    r(x, y) - prave x i y leze u istoj ravni

    dogovorili smo se da posto ovde pricamo samo o nekim x i y koje su prave, da ne moramo da imamo poseban predikat
    prava(x) koji je tacan ako je neko x prava. Taj predikat bi nam se uvek pojavljivao na pocetku svih recenica, ali posto mi 
    u zadatku pretpostavljamo da radimo samo sa pravama, prava(x) predikat smo prakticno usunjali u sve predikate koje imamo
    (∀x)(∀y) ( m(x,y) => (s(x,y) | p(x,y)) )
    (∀x)(∀y) ( s(x,y) => r(x, y) )
    (∀x)(∀y) ( p(x,y) => r(x, y) )
    (∀x)(∀y) ( m(x,y) => r(x, y) )


4. zad:  (ovaj skup uslova je nezadovoljiv, moze se pokazati metodom rezolucije, ali time se ne bavimo na ovim vezbama)
    Svaka dva brata imaju zajedničkog roditelja.
    Roditelj je stariji od deteta.
    Postoje braća.
    Ni jedna osoba nije starija od druge.

    b(x, y) - x i y su braca
    r(x, y) - x je roditelj od y
    s(x, y) - x je stariji od y

    (∀x)(∀y)(∃z) (b(x,y) => ((r(z,x) & r(z,y)) ) 
    (∀x)(∀y) ( r(x,y) => s(x,y) )
    (∃x)(∃y) b(x,y)
    (∀x)(∀y) ~s(x,y)


5. zad: (isto nije zadovoljiv skup)
    Svako ima rođaka na moru ili na planini.
    Ko ima rođaka na moru, bio je na moru.
    Ko ima rođaka na planini, bio je na planini.
    Neko nije bio ni na moru, ni na planini.

    rm(x) - x ima rodjaka na moru
    rp(x) - x ima rodjaka na planini
    m(x) - x je bio na moru
    p(x) - x je bio na planini

    (∀x) (rm(x) | rp(x))
    (∀x) (rm(x) => m(x))
    (∀x) (rp(x) => p(x))
    (∃x) (~m(x) & ~r(x))


-------------------------------------------------------------
nadalje neki primeri imaju i funkcijske i predikatske simbole
-------------------------------------------------------------
funkcijskim simbolom cemo obeleziti bas neku konkretnu jedinku, npr u sledecm primeru Janko
i ubacicemo ga u predikate. Arnost za ovaj simbol je 0 tj to je konstanta


6. zad:
    Svako ruča kod kuće ili u restoranu.
    Ko ruča u restoranu i nema novaca, taj pere sudove u restoranu.
    Janko nema novaca.
    Janko ruča kod kuće ili pere sudove u restoranu.

    predikatski simboli:
    rk(x) - x ruca kod kuce
    rr(x) - x ruca u restoranu
    nn(x) - x nema novca
    ps(x) - x pere sudove 

    funkcijski simboli:
    j - Janko              

    (∀x) (rk(x) | rr(x))
    (∃x) ( (rr(x) & nn(x)) => ps(x) )   - ovo je NETACNO, moze nam delovati iz teksta da se misli na neku konkretnu osobu
                                          ali ovo bis e citalo kao "postoji neko ko ..." a tvrdjenje treba da vazi za sve ljude
    (∀x) ( (rr(x) & nn(x)) => ps(x) )   - TACNO
    nn(j)                               - uopste ne moramo us ivm recenicama imati kvantifikatore
    rk(j) | ps(j)


7. zad:
    Ko rano rani, ceo dan je pospan.
    Ko rano rani ceo dan je pospan ili dve sreće grabi.
    Ko dve sreće grabi, ceo dan je pospan.

    rr(x) - x rano rani
    p(x) - x je ceo dan pospan
    ds(x) - x dve srece grabi

    (∀x) ( rr(x) => p(x))
    (∀x) ( rr(x) => (p(x) | ds(x) )
    (∀x) ( ds(x) => p(x))


8 zad:
    Ko se vozi avionom dosta zarađuje.
    Ko dosta zarađuje puno radi.
    Janko se vozi avionom.
    Janko ne radi puno.

    va(x) - x se vozi avionom
    dz(x) - x dosta zaradjuje
    pr(x) - x puno radi
    
    j - Janko

    (∀x) (va(x) => dz(x))
    (∀x) (dz(x) => pr(x))
    va(j)
    ~pr(j)


9. zad:
    Ako postoji cipela koja u svakom trenutku odgovara svakoj nozi,
    onda za svaku nogu postoji cipela koja joj u nekom trenutku
    odgovara i za svaku nogu postoji trenutak takav da postoji cipela
    koja joj u tom trenutku odgovara.

    ovo naizgled deluje slozeno, ali vidimo da je struktura ove recnice A => (B & C), izbrisemo kvantifikatore da nam bude lakse: 
    A = postoji cipela koja u svakom trenutku odgovara svakoj nozi                                  -> cipela koja utrenutku odgovara nozi  
    B = za svaku nogu postoji cipela koja joj u nekom trenutku odgovara                             -> nogu cipela koja joj u trenutku odgovara 
    C = za svaku nogu postoji trenutak takav da postoji cipela koja joj u tom trenutku odgovara     -> nogu trenutak takav da cipela koja joj u trenutku odgovara

    vidimo da ovde opste nema mnogo predikata, vec se moze zapisati samo sa jednim:
    p(x, y, z) - nozi x odgovara cipela y u trenutku z

    A => (B & C)   -->   p(x,y,z) => p(x,y,z) & p(x,y,z)

    (∃y)(∀z)(∀x) p(x,y,z) => ( (∀x)(∃y)(∃z)p(x,y,z) & (∀x)(∃z)(∃y)p(x,y,z) ) 


11. zad:
    Ko laže taj krade.
    Ko krade i uhvaćen je u krađi, taj ide u zatvor.
    Al Kapone laže.
    Al Kapone je uhvaćen u krađi.
    Laki Lućiano laže.

    l(x) - x laže
    k(x) - x krade
    u(x) - x uhvacen u kradji
    z(x) - x ide u zatvor
    ak - Al Kapone
    ll - Laki Luciano

    (∀x) (l(x) => k(x))
    (∀x) ( (k(x) & u(x)) => z(x) )
    l(ak)
    u(ak)
    l(ll)


12. zad
    Ako onaj ko laže taj i krade i ako bar neko laže, onda neko i krade.

    l(x) - x laze
    k(x) - x krade

    ((∀x)( (l(x) => k(x)) & (∃x)l(x) )) => (∃x)k(x)


13. zad
    Ako je X prijatelj osobe Y, onda je Y prijatelj osobe X.
    Ako je X prijatelj osobe Y, onda X voli Y.
    Ne postoji neko ko je povredio osobu koju voli.
    Janko je povredio svog prijatelja Marka.

    p(x,y) - x je prijatlj osobe Y
    v(x,y) - x voli ipsilon
    pov(x,y) - x je povredio Y
    j - Janko
    m - Marko

    (∀x)(∀y) p(x,y) => p(y,x)
    (∀x)(∀y) p(x,y) => v(x,y)
    ~[ (∃x)(∃y) (v(x,y) & pov(x,y)) ]
    p(m, j) & pov(j, m)